{"ast":null,"code":"import { loginFailure, loginStart, loginSucess } from \"./userRedux\";\nimport { publicRequest, userRequest } from \"../requestMethod\";\nimport { getProductFailure, getProductStart, getProductSuccess, deleteProductFailure, deleteProductStart, deleteProductSuccess, updateProductFailure, updateProductStart, updateProductSuccess, addProductFailure, addProductStart, addProductSuccess } from \"./productRedux\";\nexport const login = async (dispatch, user) => {\n  dispatch(loginStart());\n\n  try {\n    const res = await publicRequest.post(\"/auth/login\", user);\n    dispatch(loginSucess(res.data));\n  } catch (err) {\n    dispatch(loginFailure());\n  }\n};\nexport const getProducts = async dispatch => {\n  dispatch(getProductStart());\n\n  try {\n    const res = await publicRequest.get(\"/products\");\n    dispatch(getProductSuccess(res.data));\n  } catch (err) {\n    dispatch(getProductFailure());\n  }\n};\nexport const deleteProduct = async (id, dispatch) => {\n  dispatch(deleteProductStart());\n\n  try {\n    // const res = await userRequest.delete(`/products/${id}`);\n    dispatch(deleteProductSuccess(id));\n  } catch (err) {\n    dispatch(deleteProductFailure());\n  }\n};\nexport const updateProduct = async (id, product, dispatch) => {\n  dispatch(updateProductStart());\n\n  try {\n    // update\n    dispatch(updateProductSuccess({\n      id,\n      product\n    }));\n  } catch (err) {\n    dispatch(updateProductFailure());\n  }\n};\nexport const addProduct = async (product, dispatch) => {\n  dispatch(addProductStart());\n\n  try {\n    const res = await userRequest.post(`/products`, product);\n    dispatch(addProductSuccess(res.data));\n  } catch (err) {\n    dispatch(addProductFailure());\n  }\n};","map":{"version":3,"sources":["/home/robin/code/ECOMMERCE PROJECT/Admin/src/Redux/apiCalls.js"],"names":["loginFailure","loginStart","loginSucess","publicRequest","userRequest","getProductFailure","getProductStart","getProductSuccess","deleteProductFailure","deleteProductStart","deleteProductSuccess","updateProductFailure","updateProductStart","updateProductSuccess","addProductFailure","addProductStart","addProductSuccess","login","dispatch","user","res","post","data","err","getProducts","get","deleteProduct","id","updateProduct","product","addProduct"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,UAAvB,EAAmCC,WAAnC,QAAsD,aAAtD;AACA,SAAQC,aAAR,EAAuBC,WAAvB,QAAyC,kBAAzC;AACA,SACGC,iBADH,EAEGC,eAFH,EAGGC,iBAHH,EAIGC,oBAJH,EAKGC,kBALH,EAMGC,oBANH,EAOGC,oBAPH,EAQGC,kBARH,EASGC,oBATH,EAUGC,iBAVH,EAWGC,eAXH,EAYGC,iBAZH,QAaQ,gBAbR;AAeC,OAAO,MAAMC,KAAK,GAAE,OAAMC,QAAN,EAAeC,IAAf,KAAsB;AACzCD,EAAAA,QAAQ,CAACjB,UAAU,EAAX,CAAR;;AACA,MAAG;AACA,UAAMmB,GAAG,GAAE,MAAMjB,aAAa,CAACkB,IAAd,CAAmB,aAAnB,EAAiCF,IAAjC,CAAjB;AACAD,IAAAA,QAAQ,CAAChB,WAAW,CAACkB,GAAG,CAACE,IAAL,CAAZ,CAAR;AACF,GAHD,CAGC,OAAMC,GAAN,EAAU;AACRL,IAAAA,QAAQ,CAAClB,YAAY,EAAb,CAAR;AACF;AACF,CARO;AASR,OAAO,MAAMwB,WAAW,GAAG,MAAON,QAAP,IAAoB;AAC5CA,EAAAA,QAAQ,CAACZ,eAAe,EAAhB,CAAR;;AACA,MAAI;AACF,UAAMc,GAAG,GAAG,MAAMjB,aAAa,CAACsB,GAAd,CAAkB,WAAlB,CAAlB;AACAP,IAAAA,QAAQ,CAACX,iBAAiB,CAACa,GAAG,CAACE,IAAL,CAAlB,CAAR;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAACb,iBAAiB,EAAlB,CAAR;AACD;AACF,CARK;AAUN,OAAO,MAAMqB,aAAa,GAAG,OAAOC,EAAP,EAAWT,QAAX,KAAwB;AACnDA,EAAAA,QAAQ,CAACT,kBAAkB,EAAnB,CAAR;;AACA,MAAI;AACF;AACAS,IAAAA,QAAQ,CAACR,oBAAoB,CAACiB,EAAD,CAArB,CAAR;AACD,GAHD,CAGE,OAAOJ,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAACV,oBAAoB,EAArB,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMoB,aAAa,GAAG,OAAOD,EAAP,EAAWE,OAAX,EAAoBX,QAApB,KAAiC;AAC5DA,EAAAA,QAAQ,CAACN,kBAAkB,EAAnB,CAAR;;AACA,MAAI;AACF;AACAM,IAAAA,QAAQ,CAACL,oBAAoB,CAAC;AAAEc,MAAAA,EAAF;AAAME,MAAAA;AAAN,KAAD,CAArB,CAAR;AACD,GAHD,CAGE,OAAON,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAACP,oBAAoB,EAArB,CAAR;AACD;AACF,CARM;AASP,OAAO,MAAMmB,UAAU,GAAG,OAAOD,OAAP,EAAgBX,QAAhB,KAA6B;AACrDA,EAAAA,QAAQ,CAACH,eAAe,EAAhB,CAAR;;AACA,MAAI;AACF,UAAMK,GAAG,GAAG,MAAMhB,WAAW,CAACiB,IAAZ,CAAkB,WAAlB,EAA8BQ,OAA9B,CAAlB;AACAX,IAAAA,QAAQ,CAACF,iBAAiB,CAACI,GAAG,CAACE,IAAL,CAAlB,CAAR;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAACJ,iBAAiB,EAAlB,CAAR;AACD;AACF,CARM","sourcesContent":["import { loginFailure, loginStart, loginSucess } from \"./userRedux\"\nimport {publicRequest ,userRequest} from \"../requestMethod\"\nimport {\n   getProductFailure,\n   getProductStart,\n   getProductSuccess,\n   deleteProductFailure,\n   deleteProductStart,\n   deleteProductSuccess,\n   updateProductFailure,\n   updateProductStart,\n   updateProductSuccess,\n   addProductFailure,\n   addProductStart,\n   addProductSuccess,\n } from \"./productRedux\";\n\n export const login =async(dispatch,user)=>{\n  dispatch(loginStart())\n  try{\n     const res= await publicRequest.post(\"/auth/login\",user)\n     dispatch(loginSucess(res.data))\n  }catch(err){\n     dispatch(loginFailure())\n  }\n}\nexport const getProducts = async (dispatch) => {\n   dispatch(getProductStart());\n   try {\n     const res = await publicRequest.get(\"/products\");\n     dispatch(getProductSuccess(res.data));\n   } catch (err) {\n     dispatch(getProductFailure());\n   }\n };\n \n export const deleteProduct = async (id, dispatch) => {\n   dispatch(deleteProductStart());\n   try {\n     // const res = await userRequest.delete(`/products/${id}`);\n     dispatch(deleteProductSuccess(id));\n   } catch (err) {\n     dispatch(deleteProductFailure());\n   }\n };\n \n export const updateProduct = async (id, product, dispatch) => {\n   dispatch(updateProductStart());\n   try {\n     // update\n     dispatch(updateProductSuccess({ id, product }));\n   } catch (err) {\n     dispatch(updateProductFailure());\n   }\n };\n export const addProduct = async (product, dispatch) => {\n   dispatch(addProductStart());\n   try {\n     const res = await userRequest.post(`/products`, product);\n     dispatch(addProductSuccess(res.data));\n   } catch (err) {\n     dispatch(addProductFailure());\n   }\n };"]},"metadata":{},"sourceType":"module"}